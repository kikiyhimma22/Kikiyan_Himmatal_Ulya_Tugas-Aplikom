% * Visualisasi dan Perhitungan Geometri dengan EMT
% 
% Euler menyediakan beberapa fungsi untuk melakukan visualisasi dan
% perhitungan geometri, baik secara numerik maupun analitik (seperti
% biasanya tentunya, menggunakan Maxima). Fungsi-fungsi untuk
% visualisasi dan perhitungan geometeri tersebut disimpan di dalam file
% program "geometry.e", sehingga file tersebut harus dipanggil sebelum
% menggunakan fungsi-fungsi atau perintah-perintah untuk geometri.
>load geometry
Numerical and symbolic geometry.
% ** Fungsi-fungsi Geometri
% 
% Fungsi-fungsi untuk Menggambar Objek Geometri:
% 
%   defaultd:=textheight()*1.5: nilai asli untuk parameter d
%%   setPlotrange(x1,x2,y1,y2): menentukan rentang x dan y pada bidang
% koordinat
%%   setPlotRange(r): pusat bidang koordinat (0,0) dan batas-batas
% sumbu-x dan y adalah -r sd r
%%   plotPoint (P, "P"): menggambar titik P dan diberi label "P"
%%   plotSegment (A,B, "AB", d): menggambar ruas garis AB, diberi label
% "AB" sejauh d
%%   plotLine (g, "g", d): menggambar garis g diberi label "g" sejauh d
%%   plotCircle (c,"c",v,d): Menggambar lingkaran c dan diberi label "c"
%%   plotLabel (label, P, V, d): menuliskan label pada posisi P
% 
% Fungsi-fungsi Geometri Analitik (numerik maupun simbolik):
% 
%   turn(v, phi): memutar vektor v sejauh phi
%%   turnLeft(v):   memutar vektor v ke kiri
%%   turnRight(v):  memutar vektor v ke kanan
%%   normalize(v): normal vektor v
%%   crossProduct(v, w): hasil kali silang vektorv dan w.
%%   lineThrough(A, B): garis melalui A dan B, hasilnya [a,b,c] sdh.
% ax+by=c.
%%   lineWithDirection(A,v): garis melalui A searah vektor v
%%   getLineDirection(g): vektor arah (gradien) garis g
%%   getNormal(g): vektor normal (tegak lurus) garis g
%%   getPointOnLine(g):  titik pada garis g
%%   perpendicular(A, g):  garis melalui A tegak lurus garis g
%%   parallel (A, g):  garis melalui A sejajar garis g
%%   lineIntersection(g, h):  titik potong garis g dan h
%%   projectToLine(A, g):   proyeksi titik A pada garis g
%%   distance(A, B):  jarak titik A dan B
%%   distanceSquared(A, B):  kuadrat jarak A dan B
%%   quadrance(A, B): kuadrat jarak A dan B
%%   areaTriangle(A, B, C):  luas segitiga ABC
%%   computeAngle(A, B, C):   besar sudut <ABC
%%   angleBisector(A, B, C): garis bagi sudut <ABC
%%   circleWithCenter (A, r): lingkaran dengan pusat A dan jari-jari r
%%   getCircleCenter(c):  pusat lingkaran c
%%   getCircleRadius(c):  jari-jari lingkaran c
%%   circleThrough(A,B,C):  lingkaran melalui A, B, C
%%   middlePerpendicular(A, B): titik tengah AB
%%   lineCircleIntersections(g, c): titik potong garis g dan lingkran c
%%   circleCircleIntersections (c1, c2):  titik potong lingkaran c1 dan
% c2
%%   planeThrough(A, B, C):  bidang melalui titik A, B, C
% 
% Fungsi-fungsi Khusus Untuk Geometri Simbolik:
% 
%   getLineEquation (g,x,y): persamaan garis g dinyatakan dalam x dan y
%%   getHesseForm (g,x,y,A): bentuk Hesse garis g dinyatakan dalam x dan
% y dengan titik A pada
%%   sisi positif (kanan/atas) garis
%%   quad(A,B): kuadrat jarak AB
%%   spread(a,b,c): Spread segitiga dengan panjang sisi-sisi a,b,c, yakni
% sin(alpha)^2 dengan
%%   alpha sudut yang menghadap sisi a.
%%   crosslaw(a,b,c,sa): persamaan 3 quads dan 1 spread pada segitiga
% dengan panjang sisi a, b, c.
%%   triplespread(sa,sb,sc): persamaan 3 spread sa,sb,sc yang memebntuk
% suatu segitiga
%%   doublespread(sa): Spread sudut rangkap Spread 2*phi, dengan
% sa=sin(phi)^2 spread a.
% 
% ** Contoh 1: Luas, Lingkaran Luar, Lingkaran Dalam Segitiga
% 
% Untuk menggambar objek-objek geometri, langkah pertama adalah
% menentukan rentang sumbu-sumbu koordinat. Semua objek geometri akan
% digambar pada satu bidang koordinat, sampai didefinisikan bidang
% koordinat yang baru.
>setPlotRange(-0.5,2.5,-0.5,2.5); // mendefinisikan bidang koordinat baru 
% Sekarang tetapkan tiga poin dan plot.
>A=[1,0]; plotPoint(A,"A"); // definisi dan gambar tiga titik
>B=[0,1]; plotPoint(B,"B");
>C=[2,2]; plotPoint(C,"C");
% Kemudian untuk tiga segmen.
>plotSegment(A,B,"c"); // c=AB
>plotSegment(B,C,"a"); // a=BC
>plotSegment(A,C,"b"); // b=AC
% Fungsi geometri mencakup fungsi untuk membuat garis dan lingkaran.
% Format untuk garis adalah [a,b,c], yang mewakili garis dengan
% persamaan ax+by=c.
>lineThrough(B,C) // garis yang melalui B dan C
[-1,  2,  2]
% Hitung garis tegak lurus melalui A pada BC.
>h=perpendicular(A,lineThrough(B,C)); // garis h tegak lurus BC melalui A
% Dan persimpangan dengan BC.
>D=lineIntersection(h,lineThrough(B,C)); // D adalah titik potong h dan BC
% Plot that.
>plotPoint(D,value=1); // koordinat D ditampilkan
>aspect(1); plotSegment(A,D): // tampilkan semua gambar hasil plot...()
% Hitung luas ABC:
% 
% latex: L_{\triangle ABC}= \frac{1}{2}AD.BC.
>norm(A-D)*norm(B-C)/2 // AD=norm(A-D), BC=norm(B-C)
1.5
% Bandingkan dengan rumus determinan.
>areaTriangle(A,B,C) // hitung luas segitiga langusng dengan fungsi
1.5
% Cara lain menghitung luas segitigas ABC:
>distance(A,D)*distance(B,C)/2
1.5
% Sudut di C.
>degprint(computeAngle(B,C,A))
36°52'11.63''
% Kemudian menggambarkan lingkaran luar segitiga.
>c=circleThrough(A,B,C); // lingkaran luar segitiga ABC
>R=getCircleRadius(c); // jari2 lingkaran luar 
>O=getCircleCenter(c); // titik pusat lingkaran c 
>plotPoint(O,"O"); // gambar titik "O"
>plotCircle(c,"Lingkaran luar segitiga ABC"):
% Tampilkan koordinat titik pusat dan jari-jari lingkaran luar.
>O, R
[1.16667,  1.16667]
1.17851130198
% Sekarang akan digambar lingkaran dalam segitiga ABC. Titik pusat
% lingkaran dalam adalah titik potong garis-garis bagi sudut.
>l=angleBisector(A,C,B); // garis bagi <ACB
>g=angleBisector(C,A,B); // garis bagi <CAB
>P=lineIntersection(l,g) // titik potong kedua garis bagi sudut
[0.86038,  0.86038]
% Tambahkan semuanya ke plot.
>color(5); plotLine(l); plotLine(g); color(1); // gambar kedua garis bagi sudut
>plotPoint(P,"P"); // gambar titik potongnya
>r=norm(P-projectToLine(P,lineThrough(A,B))) // jari-jari lingkaran dalam
0.509653732104
>plotCircle(circleWithCenter(P,r),"Lingkaran dalam segitiga ABC"): // gambar lingkaran dalam
% ** Latihan
% 
% 1. Tentukan ketiga titik singgung lingkaran dalam dengan sisi-sisi
% segitiga ABC.
>setPlotRange(-3.5,5.5,-3.5,5.5);
>A=[-3,1]; plotPoint(A,"A");
>B=[1,-3]; plotPoint(B,"B");
>C=[5,5]; plotPoint(C,"C");
% 2. Gambar segitiga dengan titik-titik sudut ketiga titik singgung
% tersebut. Merupakan segitiga apakah itu?
>plotSegment(A,B,"c")
>plotSegment(B,C,"a")
>plotSegment(A,C,"b")
>aspect(1):
% 3. Hitung luas segitiga tersebut.
>lineThrough(A,B)
[4,  4,  -8]
>h=perpendicular(C,lineThrough(A,B));
>D=lineIntersection(h,lineThrough(A,B));
>plotPoint(D,value=1);
>aspect(1); plotSegment(C,D):
>distance(C,D)*distance(A,B)/2
24
% Jadi luas segitiga di atas adalah 24
% 
% 4. Tunjukkan bahwa garis bagi sudut yang ke tiga juga melalui titik
% pusat lingkaran dalam.
>l=angleBisector(A,C,B);
>g=angleBisector(C,A,B);
>P=lineIntersection(l,g)
[0.441518,  0.441518]
>color(5); plotLine(l); plotLine(g); color(1);
>plotPoint(P,"P");
>r=norm(P-projectToLine(P,lineThrough(A,B)))
2.03861492842
>plotCircle(circleWithCenter(P,r),"Lingkaran dalam segitiga ABC"):
% Jadi, terbukti bahwa garis bagi sudut yang ketiga juga melalui titik
% pusat lingkaran dalam.
% 
% 5. Gambar jari-jari lingkaran dalam.
>r=norm(P-projectToLine(P,lineThrough(A,B)))
2.03861492842
>plotCircle(circleWithCenter(P,r),"Lingkaran dalam segitiga ABC"):
% 6. Hitung luas lingkaran luar dan luas lingkaran dalam segitiga ABC.
% Adakah hubungan antara luas kedua lingkaran tersebut dengan luas
% segitiga ABC?
>c=circleThrough(A,B,C);
>R=getCircleRadius(c);
>O=getCircleCenter(c);
>plotPoint(O,"O");
>plotCircle(c,"Lingkaran luar segitiga ABC"):
>
% ** Contoh 2: Geometri Simbolik
% 
% Kita dapat menghitung geometri eksak dan simbolik menggunakan Maxima.
% 
% File geometri.e menyediakan fungsi yang sama (dan lebih banyak lagi)
% di Maxima. Namun, kita dapat menggunakan perhitungan simbolis
% sekarang.
>A &= [1,0]; B &= [0,1]; C &= [2,2]; // menentukan tiga titik A, B, C
% Fungsi untuk garis dan lingkaran bekerja seperti fungsi Euler, tetapi
% memberikan perhitungan simbolis.
>c &= lineThrough(B,C) // c=BC

                             [- 1, 2, 2]

% Kita bisa mendapatkan persamaan garis dengan mudah.
>$getLineEquation(c,x,y), $solve(%,y) | expand // persamaan garis c
>$getLineEquation(lineThrough([x1,y1],[x2,y2]),x,y), $solve(%,y) // persamaan garis melalui(x1, y1) dan (x2, y2)
>$getLineEquation(lineThrough(A,[x1,y1]),x,y) // persamaan garis melalui A dan (x1, y1)
>h &= perpendicular(A,lineThrough(B,C)) // h melalui A tegak lurus BC

                              [2, 1, 2]

>Q &= lineIntersection(c,h) // Q titik potong garis c=BC dan h

                                 2  6
                                [-, -]
                                 5  5

>$projectToLine(A,lineThrough(B,C)) // proyeksi A pada BC
>$distance(A,Q) // jarak AQ
>cc &= circleThrough(A,B,C); $cc // (titik pusat dan jari-jari) lingkaran melalui A, B, C
>r&=getCircleRadius(cc); $r , $float(r) // tampilkan nilai jari-jari
>$computeAngle(A,C,B) // nilai <ACB
>$solve(getLineEquation(angleBisector(A,C,B),x,y),y)[1] // persamaan garis bagi <ACB
>P &= lineIntersection(angleBisector(A,C,B),angleBisector(C,B,A)); $P // titik potong 2 garis bagi sudut
>P() // hasilnya sama dengan perhitungan sebelumnya
[0.86038,  0.86038]
% ** Garis dan Lingkaran yang Berpotongan
% 
% Tentu saja, kita juga bisa memotong garis dengan lingkaran, dan
% lingkaran dengan lingkaran.
>A &:= [1,0]; c=circleWithCenter(A,4);
>B &:= [1,2]; C &:= [2,1]; l=lineThrough(B,C);
>setPlotRange(5); plotCircle(c); plotLine(l);
% Persimpangan garis dengan lingkaran mengembalikan dua titik dan jumlah
% titik persimpangan.
>{P1,P2,f}=lineCircleIntersections(l,c);
>P1, P2, f
[4.64575,  -1.64575]
[-0.645751,  3.64575]
2
>plotPoint(P1); plotPoint(P2):
% Begitu pula di Maxima.
>c &= circleWithCenter(A,4) // lingkaran dengan pusat A jari-jari 4

                              [1, 0, 4]

>l &= lineThrough(B,C) // garis l melalui B dan C

                              [1, 1, 3]

>$lineCircleIntersections(l,c) | radcan, // titik potong lingkaran c dan garis l
% 
% Akan ditunjukkan bahwa sudut-sudut yang menghadap busur yang sama
% adalah sama besar.
>C=A+normalize([-2,-3])*4; plotPoint(C); plotSegment(P1,C); plotSegment(P2,C);
>degprint(computeAngle(P1,C,P2))
69°17'42.68''
>C=A+normalize([-4,-3])*4; plotPoint(C); plotSegment(P1,C); plotSegment(P2,C);
>degprint(computeAngle(P1,C,P2))
69°17'42.68''
>insimg;
% ** Garis Sumbu
% 
% Berikut adalah langkah-langkah menggambar garis sumbu ruas garis AB:
% 
% 1. Gambar lingkaran dengan pusat A melalui B.
%% 2. Gambar lingkaran dengan pusat B melalui A.
%% 3. Tarik garis melallui kedua titik potong kedua lingkaran tersebut.
% Garis ini merupakan garis sumbu (melalui titik tengah dan tegak lurus)
% AB.
>A=[2,2]; B=[-1,-2];
>c1=circleWithCenter(A,distance(A,B));
>c2=circleWithCenter(B,distance(A,B));
>{P1,P2,f}=circleCircleIntersections(c1,c2);
>l=lineThrough(P1,P2);
>setPlotRange(5); plotCircle(c1); plotCircle(c2);
>plotPoint(A); plotPoint(B); plotSegment(A,B); plotLine(l):
% Selanjutnya, kami melakukan hal yang sama di Maxima dengan koordinat
% umum.
>A &= [a1,a2]; B &= [b1,b2];
>c1 &= circleWithCenter(A,distance(A,B));
>c2 &= circleWithCenter(B,distance(A,B));
>P &= circleCircleIntersections(c1,c2); P1 &= P[1]; P2 &= P[2];
% Persamaan untuk persimpangan cukup terlibat. Tetapi kita dapat
% menyederhanakannya, jika kita memecahkan y.
>g &= getLineEquation(lineThrough(P1,P2),x,y);
>$solve(g,y)
% Ini memang sama dengan tegak lurus tengah, yang dihitung dengan cara
% yang sama sekali berbeda.
>$solve(getLineEquation(middlePerpendicular(A,B),x,y),y)
>h &=getLineEquation(lineThrough(A,B),x,y);
>$solve(h,y)
% Perhatikan hasil kali gradien garis g dan h adalah:
% 
% latex: \frac{-(b_1-a_1)}{(b_2-a_2)}\times \frac{(b_2-a_2)}{(b_1-a_1)} = -1.
% 
% Artinya kedua garis tegak lurus.
>
% * Contoh 3: Rumus Heron
% 
% Rumus Heron menyatakan bahwa luas segitiga dengan panjang sisi-sisi a,
% b dan c adalah:
% 
% latex: L = \sqrt{s(s-a)(s-b)(s-c)}\quad \text{ dengan } s=(a+b+c)/2,
% 
% atau bisa ditulis dalam bentuk lain:
% 
% latex: L = \frac{1}{4}\sqrt{(a+b+c)(b+c-a)(a+c-b)(a+b-c)}
% 
% Untuk membuktikan hal ini kita misalkan C(0,0), B(a,0) dan A(x,y),
% b=AC, c=AB. Luas segitiga ABC adalah
% 
% latex: L_{\triangle ABC}=\frac{1}{2}a\times y.
% 
% Nilai y didapat dengan menyelesaikan sistem persamaan:
% 
% latex: x^2+y^2=b^2, \quad (x-a)^2+y^2=c^2.
>setPlotRange(-1,10,-1,8); plotPoint([0,0], "C(0,0)"); plotPoint([5.5,0], "B(a,0)");  ...
> plotPoint([7.5,6], "A(x,y)");
>plotSegment([0,0],[5.5,0], "a",25); plotSegment([5.5,0],[7.5,6],"c",15);  ...
>plotSegment([0,0],[7.5,6],"b",25); 
>plotSegment([7.5,6],[7.5,0],"t=y",25):
>sol &= solve([x^2+y^2=b^2,(x-a)^2+y^2=c^2],[x,y])

                                  []

>ysol &= y with sol[2][2]; $'y=sqrt(factor(ysol^2))
Maxima said:
part: invalid index of list or matrix.
 -- an error. To debug this try: debugmode(true);

Error in:
ysol &= y with sol[2][2]; $'y=sqrt(factor(ysol^2)) ...
                        ^
% Kami mendapatkan formula Heron.
>function H(a,b,c) &= sqrt(factor((ysol*a/2)^2)); $'H(a,b,c)=H(a,b,c)
>$'Luas=H(2,5,6) // luas segitiga dengan panjang sisi-sisi 2, 5, 6
% Tentu saja, setiap segitiga persegi panjang adalah kasus yang
% terkenal.
>$H(3,4,5) //luas segitiga siku-siku dengan panjang sisi 3, 4, 5
% Dan juga jelas, bahwa ini adalah segitiga dengan luas maksimal dan dua
% sisi 3 dan 4.
>aspect (1.5); plot2d($H(3,4,x),1,7): // Kurva luas segitiga sengan panjang sisi 3, 4, x (1<= x <=7)
Variable or function ysol not found.
Error in expression: 3*abs(ysol)/2
 %ploteval:
    y0=f$(x[1],args());
adaptiveevalone:
    s=%ploteval(g$,t;args());
Try "trace errors" to inspect local variables after errors.
plot2d:
    dw/n,dw/n^2,dw/n,auto;args());
% Kasus umum juga berhasil.
>$solve(diff(H(a,b,c)^2,c)=0,c)
Maxima said:
diff: second argument must be a variable; found [1,0,4]
 -- an error. To debug this try: debugmode(true);

Error in:
 $solve(diff(H(a,b,c)^2,c)=0,c) ...
                              ^
% Sekarang mari kita temukan himpunan semua titik di mana b+c=d untuk
% beberapa konstanta d. Diketahui bahwa ini adalah elips.
>s1 &= subst(d-c,b,sol[2]); $s1
Maxima said:
part: invalid index of list or matrix.
 -- an error. To debug this try: debugmode(true);

Error in:
s1 &= subst(d-c,b,sol[2]); $s1 ...
                         ^
% And make functions of this.
>function fx(a,c,d) &= rhs(s1[1]); $fx(a,c,d), function fy(a,c,d) &= rhs(s1[2]); $fy(a,c,d)
% Sekarang kita bisa menggambar set. Sisi b bervariasi dari 1 hingga 4.
% Sudah diketahui bahwa kita mendapatkan elips.
>
% Kita dapat memeriksa persamaan umum untuk elips ini, i.e.
% 
% latex: \frac{(x-x_m)^2}{u^2}+\frac{(y-y_m)}{v^2}=1,
% 
% dimana (xm,ym) adalah pusatnya, dan u dan v adalah setengah sumbu.
>$ratsimp((fx(a,c,d)-a/2)^2/u^2+fy(a,c,d)^2/v^2 with [u=d/2,v=sqrt(d^2-a^2)/2])
% Kita melihat bahwa tinggi dan dengan demikian luas segitiga adalah
% maksimum untuk x=0. Dengan demikian luas segitiga dengan a+b+c=d
% adalah maksimal, jika sama sisi. Kami ingin menurunkan ini secara
% analitis.
>eqns &= [diff(H(a,b,d-(a+b))^2,a)=0,diff(H(a,b,d-(a+b))^2,b)=0]; $eqns
% Kita mendapatkan beberapa minimum, yang termasuk segitiga dengan satu
% sisi 0, dan solusi a=b=c=d/3.
>$solve(eqns,[a,b])
% Ada juga metode Lagrange, memaksimalkan H(a,b,c)^2 sehubungan dengan
% a+b+d=d.
>&solve([diff(H(a,b,c)^2,a)=la,diff(H(a,b,c)^2,b)=la, ...
>   diff(H(a,b,c)^2,c)=la,a+b+c=d],[a,b,c,la])
Maxima said:
diff: second argument must be a variable; found [1,0,4]
 -- an error. To debug this try: debugmode(true);

Error in:
... la,    diff(H(a,b,c)^2,c)=la,a+b+c=d],[a,b,c,la]) ...
                                                     ^
% 
% Kita bisa membuat plot situasinya
>
% First set the points in Maxima.
>A &= at([x,y],sol[2]); $A
Maxima said:
part: invalid index of list or matrix.
 -- an error. To debug this try: debugmode(true);

Error in:
A &= at([x,y],sol[2]); $A ...
                     ^
>B &= [0,0]; $B, C &= [a,0]; $C
% Kemudian atur rentang plot, dan plot poinnya.
>setPlotRange(0,5,-2,3); ...
>a=4; b=3; c=2; ...
>plotPoint(mxmeval("B"),"B"); plotPoint(mxmeval("C"),"C"); ...
>plotPoint(mxmeval("A"),"A"):
Variable a1 not found!
Use global variables or parameters for string evaluation.
Error in Evaluate, superfluous characters found.
Try "trace errors" to inspect local variables after errors.
mxmeval:
    return evaluate(mxm(s));
Error in:
... otPoint(mxmeval("C"),"C"); plotPoint(mxmeval("A"),"A"): ...
                                                     ^
% Plot the segments.
>plotSegment(mxmeval("A"),mxmeval("C")); ...
>plotSegment(mxmeval("B"),mxmeval("C")); ...
>plotSegment(mxmeval("B"),mxmeval("A")):
Variable a1 not found!
Use global variables or parameters for string evaluation.
Error in Evaluate, superfluous characters found.
Try "trace errors" to inspect local variables after errors.
mxmeval:
    return evaluate(mxm(s));
Error in:
plotSegment(mxmeval("A"),mxmeval("C")); plotSegment(mxmeval("B ...
                        ^
% CompHitung tengah tegak lurus di Maxima.
>h &= middlePerpendicular(A,B); g &= middlePerpendicular(B,C);
% Dan pusat keliling.
>U &= lineIntersection(h,g);
% Kita mendapatkan rumus untuk jari-jari lingkaran melingkar.
>&assume(a>0,b>0,c>0); $distance(U,B) | radcan
% Mari kita tambahkan ini ke plot.
>plotPoint(U()); ...
>plotCircle(circleWithCenter(mxmeval("U"),mxmeval("distance(U,C)"))):
Variable a2 not found!
Use global variables or parameters for string evaluation.
Error in ^
Error in expression: [a/2,(a2^2+a1^2-a*a1)/(2*a2)]
Error in:
plotPoint(U()); plotCircle(circleWithCenter(mxmeval("U"),mxmev ...
             ^
% Dengan menggunakan geometri, kita mendapatkan rumus sederhana
% 
% latex: \frac{a}{\sin(\alpha)}=2r
% 
% untuk radius. Kita dapat memeriksa, apakah ini benar-benar benar
% dengan Maxima. Maxima akan memperhitungkan ini hanya jika kita
% mengkutududukkannya.
>$c^2/sin(computeAngle(A,B,C))^2  | factor
>
% * Contoh 4: Garis Euler dan Parabola
% 
% Garis Euler adalah garis yang ditentukan dari segitiga apa pun yang
% tidak sama sisi. Ini adalah garis tengah segitiga, dan melewati
% beberapa titik penting yang ditentukan dari segitiga, termasuk
% ortosentrum, pusat lilitan, centroid, titik Exeter dan pusat lingkaran
% sembilan titik segitiga.
% 
% Untuk demonstrasi, kita menghitung dan memplot garis Euler dalam
% segitiga.
% 
% Pertama, kita mendefinisikan sudut segitiga di Euler. Kami menggunakan
% definisi, yang terlihat dalam ekspresi simbolis.
>A::=[-1,-1]; B::=[2,0]; C::=[1,2];
% Untuk memplot objek geometris, kita mengatur area plot, dan
% menambahkan titik-titik ke dalamnya. Semua plot objek geometris
% ditambahkan ke plot saat ini.
>setPlotRange(3); plotPoint(A,"A"); plotPoint(B,"B"); plotPoint(C,"C");
% Kita juga bisa menambahkan sisi segitiga.
>plotSegment(A,B,""); plotSegment(B,C,""); plotSegment(C,A,""):
% Berikut adalah luas segitiga, menggunakan rumus penentu. Tentu saja,
% kita harus mengambil nilai absolut dari hasil ini.
>$areaTriangle(A,B,C)
% Kita dapat menghitung koefisien sisi c.
>c &= lineThrough(A,B)

                            [- 1, 3, - 2]

% Dan juga dapatkan rumus untuk baris ini.
>$getLineEquation(c,x,y)
% Untuk bentuk Hesse, kita perlu menentukan titik, sehingga titik
% tersebut berada di sisi positif dari Hesseform. Memasukkan titik
% menghasilkan jarak positif ke garis.
>$getHesseForm(c,x,y,C), $at(%,[x=C[1],y=C[2]])
% Sekarang kita menghitung lingkaran lingkaran ABC.
>LL &= circleThrough(A,B,C); $getCircleEquation(LL,x,y)
>O &= getCircleCenter(LL); $O
% Plot lingkaran dan pusatnya. Cu dan Anda simbolis. Kami mengevaluasi
% ekspresi ini untuk Euler.
>plotCircle(LL()); plotPoint(O(),"O"):
% Kita dapat menghitung persimpangan ketinggian di ABC (ortosent) secara
% numerik dengan perintah berikut.
>H &= lineIntersection(perpendicular(A,lineThrough(C,B)),...
>  perpendicular(B,lineThrough(A,C))); $H
% Sekarang kita dapat menghitung garis Euler dari segitiga.
>el &= lineThrough(H,O); $getLineEquation(el,x,y)
% Tambahkan ke plot kita.
>plotPoint(H(),"H"); plotLine(el(),"Garis Euler"):
% Pusat gravitasi harus berada di garis ini.
>M &= (A+B+C)/3; $getLineEquation(el,x,y) with [x=M[1],y=M[2]]
>plotPoint(M(),"M"): // titik berat
% Teorinya memberitahu kita MH=2*MO. Kita perlu menyederhanakan dengan
% radcan untuk mencapai ini.
>$distance(M,H)/distance(M,O)|radcan
% Fungsi termasuk fungsi untuk sudut juga.
>$computeAngle(A,C,B), degprint(%())
60°15'18.43''
% Persamaan untuk pusat incircle tidak terlalu bagus.
>Q &= lineIntersection(angleBisector(A,C,B),angleBisector(C,B,A))|radcan; $Q
% Mari kita hitung juga ekspresi untuk jari-jari lingkaran yang
% tertulis.
>r &= distance(Q,projectToLine(Q,lineThrough(A,B)))|ratsimp; $r
>LD &=  circleWithCenter(Q,r); // Lingkaran dalam
% Mari kita tambahkan ini ke plot.
>color(5); plotCircle(LD()):
% ** Parabola
% 
% Selanjutnya akan dicari persamaan tempat kedudukan titik-titik yang berjarak sama ke titik C
% dan ke garis AB.
>p &= getHesseForm(lineThrough(A,B),x,y,C)-distance([x,y],C); $p='0
% Persamaan tersebut dapat digambar menjadi satu dengan gambar sebelumnya.
>plot2d(p,level=0,add=1,contourcolor=6):
% Ini seharusnya menjadi beberapa fungsi, tetapi pemecah default Maxima
% hanya dapat menemukan solusinya, jika kita kuadratkan persamaannya.
% Akibatnya, kami mendapatkan solusi palsu.
>akar &= solve(getHesseForm(lineThrough(A,B),x,y,C)^2-distance([x,y],C)^2,y)

        [y = - 3 x - sqrt(70) sqrt(9 - 2 x) + 26, 
                              y = - 3 x + sqrt(70) sqrt(9 - 2 x) + 26]

% Solusi pertama adalah
% 
% maxima: akar[1]
% 
% Menambahkan solusi pertama ke plot menunjukkan, bahwa itu memang jalan
% yang kita cari. Teorinya memberi tahu kita bahwa itu adalah parabola
% yang diputar.
>plot2d(&rhs(akar[1]),add=1):
>function g(x) &= rhs(akar[1]); $'g(x)= g(x)// fungsi yang mendefinisikan kurva di atas
>T &=[-1, g(-1)]; // ambil sebarang titik pada kurva tersebut
>dTC &= distance(T,C); $fullratsimp(dTC), $float(%) // jarak T ke C
>U &= projectToLine(T,lineThrough(A,B)); $U // proyeksi T pada garis AB 
>dU2AB &= distance(T,U); $fullratsimp(dU2AB), $float(%) // jatak T ke AB
% Ternyata jarak T ke C sama dengan jarak T ke AB. Coba Anda pilih titik T yang lain dan
% ulangi perhitungan-perhitungan di atas untuk menunjukkan bahwa hasilnya juga sama.
>
% 
% * Contoh 5: Trigonometri Rasional
% 
% Ini terinspirasi oleh sebuah pembicaraan N.J.Wildberger. Dalam bukunya
% "Divine Proportions", Wildberger mengusulkan untuk mengganti gagasan
% klasik tentang jarak dan sudut dengan segi empat dan penyebaran.
% Dengan menggunakan ini, memang mungkin untuk menghindari fungsi
% trigonometri dalam banyak contoh, dan tetap "rasional".
% 
% Berikut ini, saya memperkenalkan konsep, dan memecahkan beberapa
% masalah. Saya menggunakan perhitungan simbolik Maxima di sini, yang
% menyembunyikan keuntungan utama dari trigonometri rasional bahwa
% perhitungan dapat dilakukan hanya dengan kertas dan pensil. Anda
% diundang untuk memeriksa hasilnya tanpa komputer.
% 
% Intinya adalah bahwa perhitungan rasional simbolik sering kali
% menghasilkan hasil yang sederhana. Sebaliknya, trigonometri klasik
% menghasilkan hasil trigonometri yang rumit, yang mengevaluasi
% perkiraan numerik saja.
>load geometry;
% Untuk perkenalan pertama, kami menggunakan segitiga persegi panjang
% dengan proporsi Mesir yang terkenal 3, 4 dan 5. Perintah berikut
% adalah perintah Euler untuk memplot geometri bidang yang terkandung
% dalam file Euler "geometry.e".
>C&:=[0,0]; A&:=[4,0]; B&:=[0,3]; ...
>setPlotRange(-1,5,-1,5); ...
>plotPoint(A,"A"); plotPoint(B,"B"); plotPoint(C,"C"); ...
>plotSegment(B,A,"c"); plotSegment(A,C,"b"); plotSegment(C,B,"a"); ...
>insimg(30);
% Tentu,
% 
% latex: \sin(w_a)=\frac{a}{c},
% 
% di mana wa adalah sudut pada A. Cara biasa untuk menghitung sudut ini,
% adalah dengan mengambil kebalikan dari fungsi sinus. Hasilnya adalah
% sudut yang tidak dapat dicerna, yang hanya dapat dicetak kira-kira.
>wa := arcsin(3/5); degprint(wa)
36°52'11.63''
% Trigonometri rasional mencoba menghindari hal ini.
% 
% Gagasan pertama dari trigonometri rasional adalah segi empat, yang
% menggantikan jarak. Faktanya, itu hanya jarak kuadrat. Berikut ini, a,
% b, dan c menunjukkan segi empat sisi.
% 
% Teorema Pythogoras hanya menjadi a+b=c kemudian.
>a &= 3^2; b &= 4^2; c &= 5^2; &a+b=c

                               25 = 25

% Gagasan kedua dari trigonometri rasional adalah penyebaran. Spread
% mengukur pembukaan antar garis. Ini adalah 0, jika garisnya sejajar,
% dan 1, jika garisnya persegi panjang. Ini adalah kuadrat sinus dari
% sudut antara dua garis.
% 
% Penyebaran garis AB dan AC pada gambar di atas didefinisikan
% sebagaithe lines AB and AC in the image above is defined as
% 
% latex: s_a = \sin(\alpha)^2 = \frac{a}{c},
% 
% di mana a dan c adalah kuadrat dari segitiga persegi panjang dengan
% satu sudut di A.
>sa &= a/c; $sa
% Ini lebih mudah dihitung daripada sudut, tentu saja. Tetapi Anda
% kehilangan properti bahwa sudut dapat ditambahkan dengan mudah.
% 
% Tentu saja, kita dapat mengonversi nilai perkiraan kita untuk sudut wa
% menjadi sprad, dan mencetaknya sebagai pecahan.
>fracprint(sin(wa)^2)
9/25
% Hukum kosinus trgonometri klasik diterjemahkan menjadi berikut "cross
% law".
% 
% latex: (c+b-a)^2 = 4 b c \, (1-s_a)
% 
% Di sini a, b, dan c adalah segi empat dari sisi-sisi segitiga, dan sa
% adalah penyebaran di sudut A. Sisi a, seperti biasa, berlawanan dengan
% sudut A.
% 
% Hukum ini diimplementasikan dalam file geometri.e yang kita muat ke
% Euler.
>$crosslaw(aa,bb,cc,saa)
% Dalam kasus kami, kami mendapatkan
>$crosslaw(a,b,c,sa)
% Mari kita gunakan crosslaw ini untuk menemukan penyebaran di A. Untuk
% melakukan ini, kami menghasilkan crosslaw untuk segi empat a, b, dan
% c, dan menyelesaikannya untuk spread sa yang tidak diketahui.
% 
% Anda dapat melakukan ini dengan tangan dengan mudah, tetapi saya
% menggunakan Maxima. Tentu saja, kami mendapatkan hasilnya, kami sudah
% memilikinya.
>$crosslaw(a,b,c,x), $solve(%,x)
% Kami sudah tahu ini. Definisi spread adalah kasus khusus dari
% crosslaw.
% 
% Kita juga dapat menyelesaikan ini untuk umum a, b, c. Hasilnya adalah
% rumus yang menghitung penyebaran sudut segitiga yang diberikan segi
% empat dari tiga sisi.
>$solve(crosslaw(aa,bb,cc,x),x)
% Kita bisa membuat fungsi dari hasilnya. Fungsi seperti itu sudah
% didefinisikan dalam file geometri.e Euler.
>$spread(a,b,c)
% Sebagai contoh, kita dapat menggunakannya untuk menghitung sudut
% segitiga dengan sisi
% 
% latex: a, \quad a, \quad \frac{4a}{7}
% 
% Hasilnya rasional, yang tidak mudah didapatkan jika kita menggunakan
% trigonometri klasik.
>$spread(a,a,4*a/7)
% Ini adalah sudut dalam derajat.
>degprint(arcsin(sqrt(6/7)))
67°47'32.44''
% ** Contoh lain
% 
% Sekarang, mari kita coba contoh yang lebih lanjut.
% 
% Kami menetapkan tiga sudut segitiga sebagai berikut.
>A&:=[1,2]; B&:=[4,3]; C&:=[0,4]; ...
>setPlotRange(-1,5,1,7); ...
>plotPoint(A,"A"); plotPoint(B,"B"); plotPoint(C,"C"); ...
>plotSegment(B,A,"c"); plotSegment(A,C,"b"); plotSegment(C,B,"a"); ...
>insimg;
% Dengan menggunakan Pythogoras, mudah untuk menghitung jarak antara dua
% titik. Pertama-tama saya menggunakan jarak fungsi file Euler untuk
% geometri. Fungsi jarak menggunakan geometri klasik.
>$distance(A,B)
% Euler juga berisi fungsi untuk kuadran antara dua titik.
% 
% Dalam contoh berikut, karena c+b bukan a, segitiga tidak persegi
% panjang.
>c &= quad(A,B); $c, b &= quad(A,C); $b, a &= quad(B,C); $a,
% Pertama, mari kita hitung sudut tradisional. Fungsi computeAngle
% menggunakan metode biasa berdasarkan produk titik dari dua vektor.
% Hasilnya adalah beberapa perkiraan floating point.
% 
% latex: A=<1,2>\quad B=<4,3>,\quad C=<0,4>
%% latex: \mathbf{a}=C-B=<-4,1>,\quad \mathbf{c}=A-B=<-3,-1>,\quad \beta=\angle ABC
%% latex: \mathbf{a}.\mathbf{c}=|\mathbf{a}|.|\mathbf{c}|\cos \beta
%% latex: \cos \angle ABC =\cos\beta=\frac{\mathbf{a}.\mathbf{c}}{|\mathbf{a}|.|\mathbf{c}|}=\frac{12-1}{\sqrt{17}\sqrt{10}}=\frac{11}{\sqrt{17}\sqrt{10}}
>wb &= computeAngle(A,B,C); $wb, $(wb/pi*180)()
32.4711922908
% Dengan menggunakan pensil dan kertas, kita dapat melakukan hal yang
% sama dengan hukum silang. Kami memasukkan kuadrat a, b, dan c ke dalam
% hukum silang dan menyelesaikan x.
>$crosslaw(a,b,c,x), $solve(%,x), //(b+c-a)^=4b.c(1-x)
% Artinya, apa yang dilakukan penyebaran fungsi yang didefinisikan dalam
% "geometri.e".
>sb &= spread(b,a,c); $sb
% Maxima mendapatkan hasil yang sama dengan menggunakan trigonometri
% biasa, jika kita memaksanya. Itu menyelesaikan suku sin(arccos(...))
% menjadi hasil pecahan. Sebagian besar siswa tidak dapat melakukan ini.
>$sin(computeAngle(A,B,C))^2
% Setelah kita memiliki penyebaran di B, kita dapat menghitung tinggi ha
% di sisi a. Ingatlah bahwa
% 
% latex: s_b=\frac{h_a}{c}
% 
% by definition.
>ha &= c*sb; $ha
% Gambar berikut telah diproduksi dengan program geometri C.a.R., yang
% dapat menggambar segi empat dan penyebaran.
% 
% gambar: (20) Rational_Geometry_CaR.png
% 
% Menurut definisi panjang ha adalah akar kuadrat dari segi empatnya.
>$sqrt(ha)
% Sekarang kita dapat menghitung luas segitiga. Jangan lupa, bahwa kita
% berurusan dengan segi empat!
>$sqrt(ha)*sqrt(a)/2
% Rumus penentu yang biasa menghasilkan hasil yang sama.
>$areaTriangle(B,A,C)
% ** Rumus Heron
% 
% Sekarang, mari kita selesaikan masalah ini secara umum!
>&remvalue(a,b,c,sb,ha);
% Pertama-tama kita menghitung spread di B untuk segitiga dengan sisi a,
% b, dan c. Kemudian kita menghitung luas kuadrat ("quadrea"?),
% faktorkan dengan Maxima, dan kita mendapatkan rumus Heron yang
% terkenal.
% 
% Harus diakui, ini sulit dilakukan dengan pensil dan kertas.
>$spread(b^2,c^2,a^2), $factor(%*c^2*a^2/4)
% ** Aturan Triple Spread
% 
% Kerugian spread adalah tidak lagi sekadar menambahkan sudut yang sama.
% 
% Namun, tiga spread segitiga memenuhi aturan "triple spread" berikut.
>&remvalue(sa,sb,sc); $triplespread(sa,sb,sc)
% Aturan ini berlaku untuk tiga sudut mana pun yang jumlahnya mencapai
% 180°.
%% latex: \alpha+\beta+\gamma=\pi
% 
% Sejak penyebaran
% 
% latex: \alpha, \pi-\alpha
% 
% sama, aturan penyebaran tiga kali lipat juga benar, jika
% 
% latex: \alpha+\beta=\gamma
% 
% Karena penyebaran sudut negatifnya sama, maka aturan penyebaran
% rangkap tiga juga berlaku, jika
% 
% latex: \alpha+\beta+\gamma=0
% 
% Misalnya, kita dapat menghitung sebaran sudut 60°. Yaitu 3/4.
% Persamaan tersebut memiliki solusi kedua, di mana semua sebarannya
% adalah 0.
>$solve(triplespread(x,x,x),x)
% Sebaran 90° jelas adalah 1. Jika dua sudut dijumlahkan menjadi 90°,
% sebarannya memecahkan persamaan sebaran rangkap tiga dengan a,b,1.
% Dengan perhitungan berikut kita memperoleh a+b=1.
>$triplespread(x,y,1), $solve(%,x)
% Karena sebaran 180°-t sama dengan sebaran t, rumus sebaran rangkap
% tiga juga berlaku, jika satu sudut adalah jumlah atau selisih dari dua
% sudut lainnya.
% 
% Jadi kita dapat menemukan sebaran sudut yang digandakan. Perhatikan
% bahwa ada dua solusi lagi. Kita buat ini menjadi fungsi.
>$solve(triplespread(a,a,x),x), function doublespread(a) &= factor(rhs(%[1]))

                            - 4 (a - 1) a

% ** Garis Bagi Sudut
% 
% Kita sudah tahu situasinya seperti ini.
>C&:=[0,0]; A&:=[4,0]; B&:=[0,3]; ...
>setPlotRange(-1,5,-1,5); ...
>plotPoint(A,"A"); plotPoint(B,"B"); plotPoint(C,"C"); ...
>plotSegment(B,A,"c"); plotSegment(A,C,"b"); plotSegment(C,B,"a"); ...
>insimg;
% Mari kita hitung panjang garis bagi sudut di A. Namun, kita ingin
% menyelesaikannya untuk a,b,c umum.
>&remvalue(a,b,c);
% Jadi pertama-tama kita hitung sebaran sudut yang dibagi dua di A,
% menggunakan rumus sebaran rangkap tiga.
% 
% Masalah dengan rumus ini muncul lagi. Rumus ini memiliki dua solusi.
% Kita harus memilih yang benar. Solusi lainnya mengacu pada sudut yang
% dibagi dua 180°-wa.
>$triplespread(x,x,a/(a+b)), $solve(%,x), sa2 &= rhs(%[1]); $sa2
% Mari kita periksa persegi panjang Mesir.
>$sa2 with [a=3^2,b=4^2]
% Kita dapat mencetak sudut dalam Euler, setelah mentransfer sebaran ke
% radian.
>wa2 := arcsin(sqrt(1/10)); degprint(wa2)
18°26'5.82''
% Titik P merupakan perpotongan garis bagi sudut dengan sumbu y.
>P := [0,tan(wa2)*4]
[0,  1.33333]
>plotPoint(P,"P"); plotSegment(A,P):
% Mari kita periksa sudut-sudut pada contoh spesifik kita.
>computeAngle(C,A,P), computeAngle(P,A,B)
0.321750554397
0.321750554397
% Sekarang kita hitung panjang garis bagi AP.
% 
% Kita gunakan teorema sinus pada segitiga APC. Teorema ini menyatakan
% bahwa
% 
% latex: \frac{BC}{\sin(w_a)} = \frac{AC}{\sin(w_b)} = \frac{AB}{\sin(w_c)}
% 
% berlaku di sembarang segitiga. Kuadratkan, itu diterjemahkan menjadi
% apa yang disebut "hukum sebaran"
% 
% latex: \frac{a}{s_a} = \frac{b}{s_b} = \frac{c}{s_b}
% 
% di mana a, b, c menunjukkan kuadran.
% 
% Karena CPA sebarannya adalah 1-sa2, kita memperoleh bisa/1=b/(1-sa2)
% dan dapat menghitung bisa (kuadran garis bagi sudut).
>&factor(ratsimp(b/(1-sa2))); bisa &= %; $bisa
% Mari kita periksa rumus ini untuk nilai-nilai Mesir kita.
>sqrt(mxmeval("at(bisa,[a=3^2,b=4^2])")), distance(A,P)
4.21637021356
4.21637021356
% Kita juga dapat menghitung P menggunakan rumus spread.
>py&=factor(ratsimp(sa2*bisa)); $py
% Nilainya sama dengan yang kita dapatkan dengan rumus trigonometri.
>sqrt(mxmeval("at(py,[a=3^2,b=4^2])"))
1.33333333333
% ** Sudut Tali Busur
% 
% Perhatikan situasi berikut.
>setPlotRange(1.2); ...
>color(1); plotCircle(circleWithCenter([0,0],1)); ...
>A:=[cos(1),sin(1)]; B:=[cos(2),sin(2)]; C:=[cos(6),sin(6)]; ...
>plotPoint(A,"A"); plotPoint(B,"B"); plotPoint(C,"C"); ...
>color(3); plotSegment(A,B,"c"); plotSegment(A,C,"b"); plotSegment(C,B,"a"); ...
>color(1); O:=[0,0];  plotPoint(O,"0"); ...
>plotSegment(A,O); plotSegment(B,O); plotSegment(C,O,"r"); ...
>insimg;
% Kita dapat menggunakan Maxima untuk memecahkan rumus penyebaran
% rangkap tiga untuk sudut-sudut di pusat O untuk r. Dengan demikian,
% kita memperoleh rumus untuk jari-jari kuadrat pericircle dalam bentuk
% kuadran sisi-sisinya.
% 
% Kali ini, Maxima menghasilkan beberapa nol kompleks, yang kita
% abaikan.
>&remvalue(a,b,c,r); // hapus nilai-nilai sebelumnya untuk perhitungan baru
>rabc &= rhs(solve(triplespread(spread(b,r,r),spread(a,r,r),spread(c,r,r)),r)[4]); $rabc
% Kita dapat menjadikannya fungsi Euler.
>function periradius(a,b,c) &= rabc;
% Mari kita periksa hasilnya untuk titik A, B, C.
>a:=quadrance(B,C); b:=quadrance(A,C); c:=quadrance(A,B);
% Radiusnya memang 1.
>periradius(a,b,c)
1
% Faktanya, sebaran CBA hanya bergantung pada b dan c. Ini adalah
% teorema sudut tali busur.
>$spread(b,a,c)*rabc | ratsimp
% Faktanya, sebarannya adalah b/(4r), dan kita melihat bahwa sudut tali
% busur b adalah setengah sudut pusat.
>$doublespread(b/(4*r))-spread(b,r,r) | ratsimp
>
% 
% * Contoh 6: Jarak Minimal pada Bidang
% 
% ** Catatan awal
% 
% Fungsi yang, pada titik M di bidang, menetapkan jarak AM antara titik
% tetap A dan M, memiliki garis datar yang agak sederhana: lingkaran
% yang berpusat di A.
>&remvalue();
>A=[-1,-1];
>function d1(x,y):=sqrt((x-A[1])^2+(y-A[2])^2)
>fcontour("d1",xmin=-2,xmax=0,ymin=-2,ymax=0,hue=1, ...
>title="If you see ellipses, please set your window square"):
% dan grafiknya cukup sederhana: bagian atas kerucut:
>plot3d("d1",xmin=-2,xmax=0,ymin=-2,ymax=0):
% Tentu saja minimum 0 dicapai di A.
% 
% ** Dua titik
% 
% Sekarang kita lihat fungsi MA+MB di mana A dan B adalah dua titik
% (tetap). Merupakan "fakta yang diketahui" bahwa kurva level adalah
% elips, titik fokusnya adalah A dan B; kecuali untuk minimum AB yang
% konstan pada segmen [AB]:
>B=[1,-1];
>function d2(x,y):=d1(x,y)+sqrt((x-B[1])^2+(y-B[2])^2)
>fcontour("d2",xmin=-2,xmax=2,ymin=-3,ymax=1,hue=1):
% Grafiknya lebih menarik:
>plot3d("d2",xmin=-2,xmax=2,ymin=-3,ymax=1):
% Pembatasan pada garis (AB) lebih terkenal:
>plot2d("abs(x+1)+abs(x-1)",xmin=-3,xmax=3):
% ** Tiga poin
% 
% Sekarang semuanya menjadi kurang sederhana: Tidak banyak yang tahu
% bahwa MA+MB+MC mencapai nilai minimumnya di satu titik bidang, tetapi
% menentukannya tidaklah sesederhana itu:
% 
% 1) Jika salah satu sudut segitiga ABC lebih dari 120° (misalkan di A),
% maka nilai minimumnya tercapai di titik ini (misalkan AB+AC).
% 
% Contoh:
>C=[-4,1];
>function d3(x,y):=d2(x,y)+sqrt((x-C[1])^2+(y-C[2])^2)
>plot3d("d3",xmin=-5,xmax=3,ymin=-4,ymax=4);
>insimg;
>fcontour("d3",xmin=-4,xmax=1,ymin=-2,ymax=2,hue=1,title="The minimum is on A");
>P=(A_B_C_A)'; plot2d(P[1],P[2],add=1,color=12);
>insimg;
% 2) Namun jika semua sudut segitiga ABC kurang dari 120°, maka nilai
% minimumnya berada di titik F di bagian dalam segitiga, yang merupakan
% satu-satunya titik yang sudut-sudut sisi ABC-nya sama (masing-masing
% sudutnya 120°):
>C=[-0.5,1];
>plot3d("d3",xmin=-2,xmax=2,ymin=-2,ymax=2):
>fcontour("d3",xmin=-2,xmax=2,ymin=-2,ymax=2,hue=1,title="The Fermat point");
>P=(A_B_C_A)'; plot2d(P[1],P[2],add=1,color=12);
>insimg;
% Merupakan aktivitas yang menarik untuk mewujudkan gambar di atas
% dengan perangkat lunak geometri; misalnya, saya mengetahui perangkat
% lunak yang ditulis dalam Java yang memiliki instruksi "garis
% kontur"...
% 
% Semua ini ditemukan oleh seorang hakim Prancis bernama Pierre de
% Fermat; ia menulis surat kepada para dilettan lain seperti pendeta
% Marin Mersenne dan Blaise Pascal yang bekerja di pajak penghasilan.
% Jadi titik unik F sehingga FA+FB+FC minimal, disebut titik Fermat dari
% segitiga tersebut. Namun tampaknya beberapa tahun sebelumnya,
% Torriccelli dari Italia telah menemukan titik ini sebelum Fermat
% menemukannya! Bagaimanapun tradisinya adalah mencatat titik F ini...
% 
% ** Empat titik
% 
% Langkah berikutnya adalah menambahkan titik ke-4 D dan mencoba
% meminimalkan MA+MB+MC+MD; katakanlah Anda adalah operator TV kabel dan
% ingin mencari di bidang mana Anda harus meletakkan antena Anda
% sehingga Anda dapat menyalurkan sinyal ke empat desa dan menggunakan
% panjang kabel sesedikit mungkin!
>D=[1,1];
>function d4(x,y):=d3(x,y)+sqrt((x-D[1])^2+(y-D[2])^2)
>plot3d("d4",xmin=-1.5,xmax=1.5,ymin=-1.5,ymax=1.5):
>fcontour("d4",xmin=-1.5,xmax=1.5,ymin=-1.5,ymax=1.5,hue=1);
>P=(A_B_C_D)'; plot2d(P[1],P[2],points=1,add=1,color=12);
>insimg;
% Masih terdapat nilai minimum dan tidak tercapai di titik A, B, C,
% maupun D:
>function f(x):=d4(x[1],x[2])
>neldermin("f",[0.2,0.2])
[0.142858,  0.142857]
% Tampaknya dalam kasus ini, koordinat titik optimal bersifat rasional
% atau mendekati rasional...
% 
% Sekarang ABCD adalah persegi, kita mengharapkan bahwa titik optimal
% akan menjadi pusat ABCD:
>C=[-1,1];
>plot3d("d4",xmin=-1,xmax=1,ymin=-1,ymax=1):
>fcontour("d4",xmin=-1.5,xmax=1.5,ymin=-1.5,ymax=1.5,hue=1);
>P=(A_B_C_D)'; plot2d(P[1],P[2],add=1,color=12,points=1);
>insimg;
>
% * Contoh 7: Bola Dandelin dengan Povray
% 
% Anda dapat menjalankan demonstrasi ini, jika Anda telah menginstal
% Povray, dan pvengine.exe di jalur program.
% 
% Pertama, kita hitung jari-jari bola.
% 
% Jika Anda melihat gambar di bawah, Anda melihat bahwa kita memerlukan
% dua lingkaran yang menyentuh dua garis yang membentuk kerucut, dan
% satu garis yang membentuk bidang yang memotong kerucut.
% 
% Kami menggunakan file geometry.e milik Euler untuk ini.
>load geometry;
% Pertama dua garis membentuk kerucut.
>g1 &= lineThrough([0,0],[1,a])

                             [- a, 1, 0]

>g2 &= lineThrough([0,0],[-1,a])

                            [- a, - 1, 0]

% Lalu baris ketiga.
>g &= lineThrough([-1,0],[1,1])

                             [- 1, 2, 1]

% Kita merencanakan segalanya sejauh ini.
>setPlotRange(-1,1,0,2);
>color(black); plotLine(g(),"")
>a:=2; color(blue); plotLine(g1(),""), plotLine(g2(),""):
% Sekarang kita ambil titik umum pada sumbu y.
>P &= [0,u]

                                [0, u]

% Hitunglah jarak ke g1.
>d1 &= distance(P,projectToLine(P,g1)); $d1
% Hitunglah jarak ke g.
>d &= distance(P,projectToLine(P,g)); $d
% Dan temukan pusat kedua lingkaran, yang jaraknya sama.
>sol &= solve(d1^2=d^2,u); $sol
% Ada dua solusi.
% 
% Kita mengevaluasi solusi simbolik, dan menemukan kedua pusat, dan
% kedua jarak.
>u := sol()
[0.333333,  1]
>dd := d()
[0.149071,  0.447214]
% Gambarkan lingkaran-lingkaran tersebut ke dalam gambar.
>color(red);
>plotCircle(circleWithCenter([0,u[1]],dd[1]),"");
>plotCircle(circleWithCenter([0,u[2]],dd[2]),"");
>insimg;
% ** Plot dengan Povray
% 
% Selanjutnya kita plot semuanya dengan Povray. Perhatikan bahwa Anda
% mengubah perintah apa pun dalam urutan perintah Povray berikut, dan
% menjalankan kembali semua perintah dengan Shift-Return.
% 
% Pertama-tama kita memuat fungsi povray.
>load povray;
>defaultpovray="C:\Program Files\POV-Ray\v3.7\bin\pvengine.exe"
C:\Program Files\POV-Ray\v3.7\bin\pvengine.exe
% Kami menyiapkan suasananya dengan tepat.
>povstart(zoom=11,center=[0,0,0.5],height=10°,angle=140°);
% Berikutnya kita menulis kedua bola itu ke dalam file Povray.
>writeln(povsphere([0,0,u[1]],dd[1],povlook(red)));
>writeln(povsphere([0,0,u[2]],dd[2],povlook(red)));
% Dan kerucutnya, transparan.
>writeln(povcone([0,0,0],0,[0,0,a],1,povlook(lightgray,1)));
% Kita buat bidang yang dibatasi pada kerucut.
>gp=g();
>pc=povcone([0,0,0],0,[0,0,a],1,"");
>vp=[gp[1],0,gp[2]]; dp=gp[3];
>writeln(povplane(vp,dp,povlook(blue,0.5),pc));
% Sekarang kita buat dua titik pada lingkaran, di mana bola menyentuh
% kerucut.
>function turnz(v) := return [-v[2],v[1],v[3]]
>P1=projectToLine([0,u[1]],g1()); P1=turnz([P1[1],0,P1[2]]);
>writeln(povpoint(P1,povlook(yellow)));
>P2=projectToLine([0,u[2]],g1()); P2=turnz([P2[1],0,P2[2]]);
>writeln(povpoint(P2,povlook(yellow)));
% Kemudian kita buat dua titik tempat bola-bola tersebut menyentuh
% bidang. Titik-titik ini adalah fokus elips.
>P3=projectToLine([0,u[1]],g()); P3=[P3[1],0,P3[2]];
>writeln(povpoint(P3,povlook(yellow)));
>P4=projectToLine([0,u[2]],g()); P4=[P4[1],0,P4[2]];
>writeln(povpoint(P4,povlook(yellow)));
% Berikutnya kita hitung perpotongan P1P2 dengan bidang.
>t1=scalp(vp,P1)-dp; t2=scalp(vp,P2)-dp; P5=P1+t1/(t1-t2)*(P2-P1);
>writeln(povpoint(P5,povlook(yellow)));
% Kita menghubungkan titik-titik dengan segmen garis.
>writeln(povsegment(P1,P2,povlook(yellow)));
>writeln(povsegment(P5,P3,povlook(yellow)));
>writeln(povsegment(P5,P4,povlook(yellow)));
% Sekarang kita buat pita abu-abu, di mana bola-bola menyentuh kerucut.
>pcw=povcone([0,0,0],0,[0,0,a],1.01);
>pc1=povcylinder([0,0,P1[3]-defaultpointsize/2],[0,0,P1[3]+defaultpointsize/2],1);
>writeln(povintersection([pcw,pc1],povlook(gray)));
>pc2=povcylinder([0,0,P2[3]-defaultpointsize/2],[0,0,P2[3]+defaultpointsize/2],1);
>writeln(povintersection([pcw,pc2],povlook(gray)));
% Mulai program Povray.
>povend();
% Untuk mendapatkan Anaglyph ini, kita perlu memasukkan semuanya ke
% dalam fungsi scene. Fungsi ini akan digunakan dua kali nanti.
>function scene () ...
$global a,u,dd,g,g1,defaultpointsize;
$writeln(povsphere([0,0,u[1]],dd[1],povlook(red)));
$writeln(povsphere([0,0,u[2]],dd[2],povlook(red)));
$writeln(povcone([0,0,0],0,[0,0,a],1,povlook(lightgray,1)));
$gp=g();
$pc=povcone([0,0,0],0,[0,0,a],1,"");
$vp=[gp[1],0,gp[2]]; dp=gp[3];
$writeln(povplane(vp,dp,povlook(blue,0.5),pc));
$P1=projectToLine([0,u[1]],g1()); P1=turnz([P1[1],0,P1[2]]);
$writeln(povpoint(P1,povlook(yellow)));
$P2=projectToLine([0,u[2]],g1()); P2=turnz([P2[1],0,P2[2]]);
$writeln(povpoint(P2,povlook(yellow)));
$P3=projectToLine([0,u[1]],g()); P3=[P3[1],0,P3[2]];
$writeln(povpoint(P3,povlook(yellow)));
$P4=projectToLine([0,u[2]],g()); P4=[P4[1],0,P4[2]];
$writeln(povpoint(P4,povlook(yellow)));
$t1=scalp(vp,P1)-dp; t2=scalp(vp,P2)-dp; P5=P1+t1/(t1-t2)*(P2-P1);
$writeln(povpoint(P5,povlook(yellow)));
$writeln(povsegment(P1,P2,povlook(yellow)));
$writeln(povsegment(P5,P3,povlook(yellow)));
$writeln(povsegment(P5,P4,povlook(yellow)));
$pcw=povcone([0,0,0],0,[0,0,a],1.01);
$pc1=povcylinder([0,0,P1[3]-defaultpointsize/2],[0,0,P1[3]+defaultpointsize/2],1);
$writeln(povintersection([pcw,pc1],povlook(gray)));
$pc2=povcylinder([0,0,P2[3]-defaultpointsize/2],[0,0,P2[3]+defaultpointsize/2],1);
$writeln(povintersection([pcw,pc2],povlook(gray)));
$endfunction
% Anda memerlukan kacamata merah/cyan untuk menghargai efek berikut.
>povanaglyph("scene",zoom=11,center=[0,0,0.5],height=10°,angle=140°);
>
% * Contoh 8: Geometri Bumi
% 
% Dalam buku catatan ini, kami ingin melakukan beberapa perhitungan
% sferis. Fungsi-fungsi tersebut terdapat dalam berkas "spherical.e" di
% folder contoh. Kami perlu memuat berkas tersebut terlebih dahulu.
>load "spherical.e";
% Untuk memasukkan posisi geografis, kami menggunakan vektor dengan dua
% koordinat dalam radian (utara dan timur, nilai negatif untuk selatan
% dan barat). Berikut ini adalah koordinat untuk Kampus FMIPA UNY.
>FMIPA=[rad(-7,-46.467),rad(110,23.05)]
[-0.13569,  1.92657]
% Anda dapat mencetak posisi ini dengan sposprint (cetak posisi bulat).
>sposprint(FMIPA) // posisi garis lintang dan garis bujur FMIPA UNY
S 7°46.467' E 110°23.050'
% Mari kita tambahkan dua kota lagi, Solo dan Semarang.
>Solo=[rad(-7,-34.333),rad(110,49.683)]; Semarang=[rad(-6,-59.05),rad(110,24.533)];
>sposprint(Solo), sposprint(Semarang),
S 7°34.333' E 110°49.683'
S 6°59.050' E 110°24.533'
% Pertama, kita hitung vektor dari satu ke yang lain pada bola ideal.
% Vektor ini adalah [arah, jarak] dalam radian. Untuk menghitung jarak
% di bumi, kita kalikan dengan jari-jari bumi pada garis lintang 7°.
>br=svector(FMIPA,Solo); degprint(br[1]), br[2]*rearth(7°)->km // perkiraan jarak FMIPA-Solo
65°20'26.60''
53.8945384608
% Ini adalah perkiraan yang bagus. Rutin berikut menggunakan perkiraan
% yang lebih baik lagi. Pada jarak yang pendek, hasilnya hampir sama.
>esdist(FMIPA,Semarang)->" km" // perkiraan jarak FMIPA-Semarang
Commands must be separated by semicolon or comma!
Found:  // perkiraan jarak FMIPA-Semarang (character 32)
You can disable this in the Options menu.
Error in:
esdist(FMIPA,Semarang)->" km" // perkiraan jarak FMIPA-Semaran ...
                             ^
% Ada fungsi untuk judul, yang memperhitungkan bentuk elips bumi. Sekali
% lagi, kami mencetak dengan cara yang canggih.
>sdegprint(esdir(FMIPA,Solo))
     65.34°
% Sudut suatu segitiga melebihi 180° pada bola.
>asum=sangle(Solo,FMIPA,Semarang)+sangle(FMIPA,Solo,Semarang)+sangle(FMIPA,Semarang,Solo); degprint(asum)
180°0'10.77''
% Ini dapat digunakan untuk menghitung luas segitiga. Catatan: Untuk
% segitiga kecil, ini tidak akurat karena kesalahan pengurangan dalam
% asum-pi.
>(asum-pi)*rearth(48°)^2->" km^2" // perkiraan luas segitiga FMIPA-Solo-Semarang
Commands must be separated by semicolon or comma!
Found:  // perkiraan luas segitiga FMIPA-Solo-Semarang (character 32)
You can disable this in the Options menu.
Error in:
(asum-pi)*rearth(48°)^2->" km^2" // perkiraan luas segitiga FM ...
                                ^
% Ada fungsi untuk ini, yang menggunakan lintang rata-rata segitiga
% untuk menghitung jari-jari bumi, dan menangani kesalahan pembulatan
% untuk segitiga yang sangat kecil.
>esarea(Solo,FMIPA,Semarang)->" km^2", //perkiraan yang sama dengan fungsi esarea()
2123.64310526 km^2
% Kita juga dapat menambahkan vektor ke posisi. Vektor berisi arah dan
% jarak, keduanya dalam radian. Untuk mendapatkan vektor, kita
% menggunakan svector. Untuk menambahkan vektor ke posisi, kita
% menggunakan saddvector.
>v=svector(FMIPA,Solo); sposprint(saddvector(FMIPA,v)), sposprint(Solo),
S 7°34.333' E 110°49.683'
S 7°34.333' E 110°49.683'
% Fungsi-fungsi ini mengasumsikan bentuk bola yang ideal. Sama halnya di
% bumi.
>sposprint(esadd(FMIPA,esdir(FMIPA,Solo),esdist(FMIPA,Solo))), sposprint(Solo),
S 7°34.333' E 110°49.683'
S 7°34.333' E 110°49.683'
% Mari kita lihat contoh yang lebih besar, Tugu Jogja dan Monas Jakarta
% (menggunakan Google Earth untuk mencari koordinatnya).
>Tugu=[-7.7833°,110.3661°]; Monas=[-6.175°,106.811944°];
>sposprint(Tugu), sposprint(Monas)
S 7°46.998' E 110°21.966'
S 6°10.500' E 106°48.717'
% Menurut Google Earth, jaraknya adalah 429,66 km. Kami memperoleh
% perkiraan yang baik.
>esdist(Tugu,Monas)->" km" // perkiraan jarak Tugu Jogja - Monas Jakarta
Commands must be separated by semicolon or comma!
Found:  // perkiraan jarak Tugu Jogja - Monas Jakarta (character 32)
You can disable this in the Options menu.
Error in:
esdist(Tugu,Monas)->" km" // perkiraan jarak Tugu Jogja - Mona ...
                         ^
% Judulnya sama dengan yang dihitung di Google Earth.
>degprint(esdir(Tugu,Monas))
294°17'2.85''
% Akan tetapi, kita tidak lagi memperoleh posisi target yang tepat, jika
% kita menambahkan arah dan jarak ke posisi awal. Hal ini terjadi karena
% kita tidak menghitung fungsi invers secara tepat, tetapi mengambil
% perkiraan radius bumi di sepanjang lintasan.
>sposprint(esadd(Tugu,esdir(Tugu,Monas),esdist(Tugu,Monas)))
S 6°10.500' E 106°48.717'
% Namun, kesalahannya tidak besar.
>sposprint(Monas),
S 6°10.500' E 106°48.717'
% Tentu saja, kita tidak dapat berlayar dengan arah yang sama dari satu
% tujuan ke tujuan lain, jika kita ingin mengambil jalur terpendek.
% Bayangkan, Anda terbang ke arah timur laut mulai dari titik mana pun
% di bumi. Kemudian Anda akan berputar ke kutub utara. Lingkaran besar
% tidak mengikuti arah yang konstan!
% 
% Perhitungan berikut menunjukkan bahwa kita jauh dari tujuan yang
% benar, jika kita menggunakan arah yang sama selama perjalanan kita.
>dist=esdist(Tugu,Monas); hd=esdir(Tugu,Monas);
% Sekarang kita tambahkan 10 dikalikan sepersepuluh jaraknya, dengan
% memakai arah ke Monas, kita sampai di Tugu.
>p=Tugu; loop 1 to 10; p=esadd(p,hd,dist/10); end;
% Hasilnya sangat jauh.
>sposprint(p), skmprint(esdist(p,Monas))
S 6°11.250' E 106°48.372'
     1.529km
% Sebagai contoh lain, mari kita ambil dua titik di bumi pada garis
% lintang yang sama.
>P1=[30°,10°]; P2=[30°,50°];
% Lintasan terpendek dari P1 ke P2 bukanlah lingkaran lintang 30°,
% tetapi lintasan yang lebih pendek yang dimulai 10° lebih jauh ke utara
% di P1.
>sdegprint(esdir(P1,P2))
     79.69°
% Namun, jika kita mengikuti pembacaan kompas ini, kita akan berputar ke
% kutub utara! Jadi kita harus menyesuaikan arah kita di sepanjang
% jalan. Untuk tujuan kasar, kita menyesuaikannya pada 1/10 dari total
% jarak.
>p=P1;  dist=esdist(P1,P2); ...
>  loop 1 to 10; dir=esdir(p,P2); sdegprint(dir), p=esadd(p,dir,dist/10); end;
     79.69°
     81.67°
     83.71°
     85.78°
     87.89°
     90.00°
     92.12°
     94.22°
     96.29°
     98.33°
% Jaraknya tidak tepat, karena kita akan menambahkan sedikit kesalahan,
% jika kita mengikuti arah yang sama terlalu lama.
>skmprint(esdist(p,P2))
     0.203km
% Kita memperoleh perkiraan yang baik, jika kita menyesuaikan arah
% setelah setiap 1/100 jarak total dari Tugu ke Monas.
>p=Tugu; dist=esdist(Tugu,Monas); ...
>  loop 1 to 100; p=esadd(p,esdir(p,Monas),dist/100); end;
>skmprint(esdist(p,Monas))
     0.000km
% Untuk keperluan navigasi, kita bisa mendapatkan urutan posisi GPS
% sepanjang lingkaran besar menuju Monas dengan fungsi navigasi.
>load spherical; v=navigate(Tugu,Monas,10); ...
>  loop 1 to rows(v); sposprint(v[#]), end;
S 7°46.998' E 110°21.966'
S 7°37.422' E 110°0.573'
S 7°27.829' E 109°39.196'
S 7°18.219' E 109°17.834'
S 7°8.592' E 108°56.488'
S 6°58.948' E 108°35.157'
S 6°49.289' E 108°13.841'
S 6°39.614' E 107°52.539'
S 6°29.924' E 107°31.251'
S 6°20.219' E 107°9.977'
S 6°10.500' E 106°48.717'
% Kita menulis suatu fungsi yang memplot bumi, dua posisi, dan posisi di
% antaranya.
>function testplot ...
$useglobal;
$plotearth;
$plotpos(Tugu,"Tugu Jogja"); plotpos(Monas,"Tugu Monas");
$plotposline(v);
$endfunction
% Sekarang rencanakan semuanya.
>plot3d("testplot",angle=25, height=6,>own,>user,zoom=4):
% Atau gunakan plot3d untuk mendapatkan tampilan anaglifnya. Ini tampak
% sangat bagus dengan kaca mata merah/biru kehijauan.
>plot3d("testplot",angle=25,height=6,distance=5,own=1,anaglyph=1,zoom=4):
% * Latihan
% 
% 1. Gambarlah segi-n beraturan jika diketahui titik pusat O, n, dan
% jarak titik pusat ke titik-titik sudut segi-n tersebut (jari-jari
% lingkaran luar segi-n), r.
% 
% Petunjuk:
% 
% - Besar sudut pusat yang menghadap masing-masing sisi segi-n adalah
% (360/n).
%% - Titik-titik sudut segi-n merupakan perpotongan lingkaran luar segi-n
% dan garis-garis yang melalui pusat dan saling membentuk sudut sebesar
% kelipatan (360/n).
%% - Untuk n ganjil, pilih salah satu titik sudut adalah di atas.
%% - Untuk n genap, pilih 2 titik di kanan dan kiri lurus dengan titik
% pusat.
%% - Anda dapat menggambar segi-3, 4, 5, 6, 7, dst beraturan.
>load geometry
Numerical and symbolic geometry.
>setPlotRange(-3.5,3.5,-3.5,3.5);
>A=[-2,-2]; plotPoint(A,"A");
>B=[2,-2]; plotPoint(B,"B");
>C=[0,3]; plotPoint(C,"C");
>plotSegment(A,B,"c");
>plotSegment(B,C,"a");
>plotSegment(A,C,"b");
>aspect(1):
>c=circleThrough(A,B,C);
>R=getCircleRadius(c);
>O=getCircleCenter(c);
>plotPoint(O,"O");
>l=angleBisector(A,C,B);
>color(2); plotLine(l); color(1);
>plotCircle(c,"Lingkaran luar segitiga ABC"):
% 2. Gambarlah suatu parabola yang melalui 3 titik yang diketahui.
% 
% Petunjuk:
%% - Misalkan persamaan parabolanya y= ax^2+bx+c.
%% - Substitusikan koordinat titik-titik yang diketahui ke persamaan
% tersebut.
%% - Selesaikan SPL yang terbentuk untuk mendapatkan nilai-nilai a, b, c.
>load geometry;
>setPlotRange(5); P=[2,0]; Q=[4,0]; R=[0,-4];
>plotPoint(P,"P"); plotPoint(Q,"Q"); plotPoint(R,"R"):
>sol &= solve([a+b=-c,16*a+4*b=-c,c=-4],[a,b,c])

                     [[a = - 1, b = 5, c = - 4]]

% Sehingga dapat ditentukan nilai a = -1, b = 5 dan c = -4
>function y&=4*x^2+5*x-12

                              2
                           4 x  + 5 x - 12

% 
>plot2d("4*x^2+5*x-12",-13,13,-13,13):
% 3. Gambarlah suatu segi-4 yang diketahui keempat titik sudutnya,
% misalnya A, B, C, D.
%%    - Tentukan apakah segi-4 tersebut merupakan segi-4 garis singgung
% (sisinya-sisintya merupakan garis singgung lingkaran yang sama yakni
% lingkaran dalam segi-4 tersebut).
%%    - Suatu segi-4 merupakan segi-4 garis singgung apabila keempat
% garis bagi sudutnya bertemu di satu titik.
%%    - Jika segi-4 tersebut merupakan segi-4 garis singgung, gambar
% lingkaran dalamnya.
%%    - Tunjukkan bahwa syarat suatu segi-4 merupakan segi-4 garis
% singgung apabila hasil kali panjang sisi-sisi yang berhadapan sama.
>load geometry
Numerical and symbolic geometry.
>setPlotRange(-5,5,-5,5);
>A=[-4,-4]; plotPoint(A,"A");
>B=[4,-4]; plotPoint(B,"B");
>C=[4,4]; plotPoint(C,"C");
>D=[-4,4]; plotPoint(D,"D");
>plotSegment(A,B,"");
>plotSegment(B,C,"");
>plotSegment(C,D,"");
>plotSegment(A,D,"");
>aspect(1):
>l=angleBisector(A,B,C);
>m=angleBisector(B,C,D);
>P=lineIntersection(l,m);
>color(5); plotLine(l); plotLine(m); color(1);
>plotPoint(P,"P"):
% Dapat dilihat bahwa keempat garis bagi sudutnya bertemu di satu titik
% yaitu titik P.
>r=norm(P-projectToLine(P,lineThrough(A,B)));
>plotCircle(circleWithCenter(P,r),"Lingkaran dalam segiempat ABCD"):
% Dapat dilihat bahwa sisi-sisinya merupakan garis singgung lingkaran
% yang sama.
% 
% Akan ditunjukkan bahwa hasil kali panjang sisi-sisi yang berhadapan
% sama.
>AB=norm(A-B)
8
>CD=norm(C-D)
8
>AD=norm(A-D)
8
>BC=norm(B-C)
8
>AB.CD
64
>AD.BC
64
% Terbukti bahwa hasil kali panjang sisi-sisi yang berhadapan sama yaitu
% 64. Jadi dapat dipastikan bahwa segiempat tersebut merupakan segiempat
% garis singgung.
% 
% 
% 4. Gambarlah suatu ellips jika diketahui kedua titik fokusnya,
% misalnya P dan Q. Ingat ellips dengan fokus P dan Q adalah tempat
% kedudukan titik-titik yang jumlah jarak ke P dan ke Q selalu sama
% (konstan).
% 
% 
% Penyelesaian :
%% Diketahui kedua titik fokus P = [-2,-2] dan Q = [2,-2]
>P=[-2,-2]; Q=[2,-2];
>function d1(x,y):=sqrt((x-P[1])^2+(y-P[2])^2)
>Q=[2,-2]; function d2(x,y):=sqrt((x-P[1])^2+(y-P[2])^2)+sqrt((x-Q[1])^2+(y-Q[2])^2)
>fcontour("d2",xmin=-2,xmax=2,ymin=-3,ymax=1,hue=1):
>plot3d("d2",xmin=-2,xmax=2,ymin=-3,ymax=1):
>plot2d("abs(x+1)+abs(x-1)",xmin=-3,xmax=3):
% 5. Gambarlah suatu hiperbola jika diketahui kedua titik fokusnya,
% misalnya P dan Q. Ingat ellips dengan fokus P dan Q adalah tempat
% kedudukan titik-titik yang selisih jarak ke P dan ke Q selalu sama
% (konstan).
>P=[-2,-2]; Q=[2,-2];
>function d1(x,y):=sqrt((x-p[1])^2+(y-p[2])^2)
>Q=[2,-2]; function d2(x,y):=sqrt((x-P[1])^2+(y-P[2])^2)+sqrt((x+Q[1])^2+(y+Q[2])^2)
>fcontour("d2",xmin=-2,xmax=2,ymin=-3,ymax=1,hue=1):
>plot3d("d2",xmin=-2,xmax=2,ymin=-3,ymax=1):
>plot2d("abs(x+1)+abs(x-1)",xmin=-3,xmax=3):
>
>
